Commande : node -v

On install express pour le serveur dans le backend, 
Les commande à installer : git init pour initialiser le projet
On peut taper la commande : git init -y
Dans le fichier package.json, on ajoute le script 
On creer un fichier, index.js
On install express npm install express.
On creer la route pour afficher la page dans un navigateur, 
On peut le faire à travers la documentation de l'express par hello world, puis on copier le code
et on le colle dans le fichier index.js.
Pour cela on lie le l'application au port 3000.

Ensuite on install nodemon, on utilise la commande suivante : npm i nodemon
Puis on ajoute le script dans le fichier package.json : start : nodemon index.js


La base de donnée utilisé est le mongoDB, 
On creer un compte de MongoDB en ligne, 

Il faut configurer la base de donnée, pour cela il faut un projet du nom de la base, puis ajouter l'adresse IP dans Network Access, 
Ajouter une adresse IP.
Cliquer sur Data base, une fois créer on se connecte à la base et il faut installer une commande : npm install mongodb

Une fois la connection etablie avec le code de la base de donnée, voir le code.
On install le dotenv : npm i dotenv
On creer un fichier .env, on ajoute les lien de la connexion à la base de donnée c'est le nom et le mot de passe
Dans le fichier .env, il faut ajouter le numero du port voir le code.
Ensuite on install mongoose 
On install postman
Une fois l'appel de cors effectuer il faut installer cors : npm i cors 

Au niveau de la base de donnée, on insert les donnée à travers postman pour identifier les Id
Nous avons effectuer plusieurs requêtes pour la base de donnée 



Les outils utilisé : MongoDB, postman, nodemon, dotenv, stripe.com 

On utilise stripe le service de paiement en ligne
Pour cela, on se connecter et on creer un nouveau compte
Pour utiliser stripe, on install la ligne de commande suivante : npm install --save stripe

On as utiliser les requêtes pour la gestion des données à savoir : creation des utilisateur, envoie et recuperation des données.
On peut aussi visite le site jwt 
Pour cela on install le jwttoken : npm i jsonwebtoken
La commande npm i jsonwebtoken installe la bibliothèque jsonwebtoken nécessaire pour travailler avec des JWT dans votre projet Node.js, 
facilitant ainsi la gestion de l'authentification et de l'autorisation de manière sécurisée et standardisée.

Ensuite on install node crypto randombytes, pour cela on tape dans le terminal : node et ensuite : require('crypto').randomBytes(64).toString('hex')
On copie la clé et on le met dans le dossier .env avec un nom variable,
Une fois qu'on termine les code, au niveau de la réquête de user/email et delete email, on ajoute verifyJWT


FRONT-END : 
Côté front-end on utilise le tailwindcss
Dans le site de tailwindcss, cliquer Gedstart, frameworks guides, Vite
On install la commande : npm create vite@latest ./ dans le fichier front,
framework : React 
select a variant: JavaScript
On install : npm install
On redemare le serveur : nom run dev 
Puis on install le tailwindcss : npm install -D tailwindcss postcss autoprefixer
Et on install la commande suivante : npx tailwindcss init -p
Il creer un fichier tailwindcss
On se rend dans le dossier src/index.css on supprime tout et on ajoute ce code : @tailwind base;
@tailwind components;
@tailwind utilities;


Dans le fichier frontend, on install cette commande de react router : npm install react-router-dom localforage match-sorter sort-by


Une fois l'installation terminée, on import le code suivant dans le fichier main.js : import {
  createBrowserRouter,
  RouterProvider,
} from "react-router-dom";

Ensuite on ajoute le code et le RouterProvider voir le code main.js

On supprime le fichier app.js

On dois utiliser une couleur pour le site, pour cela on copier le code dans son github (colors: {
        'primary': '#b68bdcb1',
        'secondary': '#2E4CFF',
      })
pour le coller dans le tailwindcss

On as telecharger le dossier du frontend de son github et on a supprimer les fichier dejà pour ajouter ces fichier, 

On creer un dossier route et un fichier route.jsx
On install une extension, ES7+react
Dans le fichier main.js, on suprime le path et le RouterProvider

On as creer des dossier et des fichiers, Home, NavLayout et Navbar

Pour chaque page on creer un dossier et les fichier
Pour la couleur du site pour mettre en blanc et sombre on utilise un site mui.com, dans le site on recherche theme et on choisi : Theme scoping

Explication des fonction css : justify-between permet d'alargir les espaces des écritures

Il faut noter que dans le dossier Pages/Home/Hero se sont les fichier de la page d'acceuil et le carousel
Pour le faire on utiliser la bibliothèque swiper

Dans le fichier HomeContainer c'est là est defini le swipper

Les fichier Hero.jsx et Hero2.jsx sont les codes qui répresentent les images du backroung

Après ces deux fichiers, on se tourne vers le fichier Home.jsx pour cela on as besoin de creer un dossier et un fichier galery dans le dossier Home
Nb : chaque fois que vous apporter une image, il faut l'importer 

Ensuite chaque bloc represente un fichier et qui est appeler dans le Home.jsx
